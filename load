 size := len(c.engines)
    done := make(chan bool, size)   
    
    pipeWriters := []*io.PipeWriter{}
    pipeReaders := []*io.PipeReader{}
    for _, n := range c.engines {
        pipeReader, pipeWriter := io.Pipe()
        pipeReaders = append(pipeReaders, pipeReader)
        pipeWriters = append(pipeWriters, pipeWriter)
        
        go func(reader *io.PipeReader, nn *cluster.Engine) {
			// call engine load image
            err := nn.Load(reader)          
            if callback != nil {
                if err != nil {
                    callback(nn.Name, err.Error())
                }
            }			
			// clean up
			defer reader.Close()			
            done <- true

        }(pipeReader, n)
    }
	
	// create multi-writer
    listWriter := []io.Writer{}
    for _, pipeW := range pipeWriters {
        listWriter = append(listWriter, pipeW)
    } 
    mutiWriter := io.MultiWriter(listWriter...)
	
	// copy image-reader to muti-writer
    written, err := io.Copy(mutiWriter, imageReader)
    if err != nil {
        log.Error(err)
    }
	
	// close pipe writers
    for _, pipeW := range pipeWriters {
        pipeW.Close()
    }
	
	// wait all host done
    for i := 0; i < size; i++ {
        <-done
    }
