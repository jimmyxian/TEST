func (client *DockerClient) BuildImage(image BuildImage) (io.ReadCloser, error) {
    v := url.Values{}
    if image.DockerfilePath != "" {
        v.Set("dockerfile", image.DockerfilePath)
    }
    if image.Tag != "" {
        v.Set("t", image.Tag)
    }
    if image.Remote != "" {
        v.Set("remote", image.Remote)
    }
    if image.NoCache {
        v.Set("nocache", "1")
    }
    if image.Pull {
        v.Set("pull", "1")
    }
    if image.Remove {
        v.Set("rm", "1")
    } else {
        v.Set("rm", "0")
    }
    if image.ForceRemove {
        v.Set("forcerm", "1")
    }
    if image.Quiet {
        v.Set("q", "1")
    }

    v.Set("cpusetcpus", image.CpuSet)
    v.Set("cpushares", strconv.FormatInt(image.CpuShares, 10))
    v.Set("memory", strconv.FormatInt(image.Memory, 10))
    v.Set("memswap", strconv.FormatInt(image.MemorySwap, 10))

    headers := make(map[string]string)
    if image.Auth != nil {
        headers["X-Registry-Auth"] = image.Auth.encode()
    }
    if image.Config != nil {
        headers["X-Registry-Config"] = image.Config.encode()
    }
    if image.Context != nil {
        headers["Content-Type"] = "application/tar"
    }

    uri := fmt.Sprintf("/%s/build?%s", APIVersion, v.Encode())
    return client.doStreamRequest("POST", uri, image.Context, headers)
}

// ConfigFile holds parameters for authenticating during a BuildImage request
type ConfigFile struct {
    Configs  map[string]AuthConfig `json:"configs,omitempty"`
    rootPath string
}

// encode the configuration struct into base64 for the X-Registry-Config header
func (c *ConfigFile) encode() string {
    var buf bytes.Buffer
    json.NewEncoder(&buf).Encode(c)
    return base64.URLEncoding.EncodeToString(buf.Bytes())
}

type BuildImage struct {
    Auth           *AuthConfig
    Config         *ConfigFile

    Tag            string
    Remote         string
    DockerfilePath string
    Context        io.Reader
    NoCache        bool
    Pull           bool
    Remove         bool
    ForceRemove    bool
    Quiet          bool
    Memory         int64
    MemorySwap     int64
    CpuShares      int64
    CpuSet         string
}

BuildImage(image BuildImage) (io.ReadCloser, error)




package main

import (
    "archive/tar"
    "bytes"
    "fmt"
    "github.com/samalba/dockerclient"
    "io/ioutil"
)

func main() {
    // Init the client
    docker, _ := dockerclient.NewDockerClient("unix:///var/run/docker.sock", nil)

    files := make(map[string]string)
    files["Dockerfile"] = "FROM busybox"

    buf := new(bytes.Buffer)
    tw := tar.NewWriter(buf)
    for k, v := range files {
        hdr := &tar.Header{
            Name: k,
            Size: int64(len(v)),
        }
        err := tw.WriteHeader(hdr)
        if err != nil {
            return
        }
        _, err = tw.Write([]byte(v))
        if err != nil {
            return
        }
    }
    
        image := dockerclient.BuildImage{
        Auth:           nil,
        Config:         nil,
        Tag:            "testimage:ok",
        Remote:         "",
        DockerfilePath: "",
        Context:        nil,
        NoCache:        false,
        Pull:           true,
        Remove:         false,
        ForceRemove:    false,
        Quiet:          false,
        Memory:         0,
        MemorySwap:     0,
        CpuShares:      0,
        CpuSet:         "",
    }

    image.Context = buf

    reader, err := docker.BuildImage(image)
    if err != nil {
        fmt.Printf("%s", err.Error())
    }
    data, _ := ioutil.ReadAll(reader)

    fmt.Printf("%s", data)
}
