大家上午好，很高兴有这么一次机会和大家一起交流探讨容器相关技术。
非常感谢主办方InfoQ能提供这样一个机会
同时感谢各位的支持，能利用周末时间，来参与到这场大会。
前边的演讲呢非常精彩，我个人感觉受益匪浅。
我今天分享的题目是“Swarm的现状与未来”。
这些内容是一家之言，可能存在认识不够的地方，还请大家包涵,
最后希望我的分享能够对大家有所启发和帮助。

首先做一个自我介绍，我叫线超博，来自华为IT产品线云计算部门。
目前主要从事云计算方面的技术研究工作，主要的研究方向是Docker技术在云计算领域的研究和实践。
业余时间也参与Docker社区Swarm项目，目前在社区担任maintainer工作。
下边是我的联系方式，非常希望和大家进行交流，也希望能够获得大家的帮助。

我这次的分享主要分三个部分，
Swarm项目的现状
我会从Swarm的特点、功能、周边生态等几个方面介绍Swarm项目。
Swarm社区的现状
这个主要是介绍Swarm项目的发展历史、社区状况、版本节奏等内容。
Swarm的未来规划
大家可能对Swarm也有所认识，Swarm项目历史并不长，目前还处于快速发展当中。
那么未来Swarm还有哪些规划？发展方向是什么？我回在这个章节讲解。
希望我的演讲能让大家对Swarm有个完整的认识。
当然还有个小小的私心，也希望更多的人能够参与到Swarm项目中，促进Swarm项目的发展?
最后，我会留出大概10分钟的时间，用来解答大家的问题。

大家可能清楚，Swarm是Docker社区的一个子项目。
那么Swarm在Docker社区各个项目中的位置，以及与其他项目的关系是什么呢？
下面这张图，介绍了Docker社区现有的主要项目。
docker社区的明星无疑是docker项目，围绕着docker项目，也派生出来一些子项目。
这些子项目或者服务于Docker engine，或者以Docker项目为基础。
我们来一起看下：
首先，最下面一层是一些lib库，为Docker engine提供一些基础功能。
》 libcontainer主要封装了底层容器技术。目前libcontainer已经被贡献给OCI？？？
》 libnetwork封装了容器网络，对网络部分进行了抽象。
》 notary主要用于通信安全以及镜像安全。
从下数第二层，就是docker engine项目，这个是整个docker社区的核心。 
从下数第三层，是docker公司去年底发布的三剑客，用来提供容器编排集群管理。
》compose主要用来提供容器的编排能力
》swarm项目， 主要用与提供容器的集群管理。这个也是本次演讲的主题。
》Machine主要用来创建包含docker-engine的主机。
三者本身互相独立，同时也可以互相配合完成对容器集群的编排管理。

最上面一层，是docker公司为了方便windows以及mac用户使用docker，产生了2个子项目。
》　Toolbox提供了一个工具集，用来快速构建docker相关环节。
》　Kitematic用来提供一个GUI用来管理docker-engine。后续也可能会集成对compose的支持，从而可以使用UI部署基于Docker的应用。
最右边是registry项目，用来提供私有的镜像仓库。用户可以基于此，搭建自己的私有仓库。
下面和大家具体来看一下swarm项目。

首先先介绍一下swarm的背景，为什么会出现swarm？我们为什么需要Swarm？
其实原因很简单，因为现实中我们的应用可能会有很多，应用本身也可能很复杂的，单个docker engine所能提供的资源未必能够满足要求。
而且应用本身也会有可靠性这样的要求，希望避免单点故障，这样的话势必需要分布在多个docker engine。

这样把多个docker engine组成集群，无疑会简化用户的操作，简化用户对Docker engine的管理，从而解放用户为用户使用docker提供方便。
于是Docker社区，就产生了Swarm项目。

我们来看下Swarm这个Docker集群解决方案。
Swarm这个项目名称其他特别贴切。在Wiki的解释中，Swarm behavior是指动物的群集行为。
比如我们常见的蜂群，鱼群；秋天往南飞的雁群都可以称作Swarm behavior。

Swarm项目正是这样，通过把多个Docker Engine聚集在一起，形成一个大的docker-engine，对外提供容器的集群服务。
同时这个集群对外提供Swarm API，用户可以像使用Docker Engine一样使用Docker集群。

接下来和大家一起来看一下swarm这个Docker集群解决方案的特点。
》 Swarm一个很大的特点就是，对外以Docker API接口呈现，这样带来的好处是，如果现有系统使用Docker Engine，则可以平滑将Docker Engine切到Swarm上，无需改动现有系统。

》 Swarm对用户来说，之前使用Docker的经验可以继承过来。非常易上手，学习成本和二次开发成本都比较低。
   同时Swarm本身专注于Docker集群管理，非常轻量，占用资源也非常少。

》 第三个特点，用官方描述是“Batteries included but swappable”，简单说，就是插件化机制，swarm中的各个模块都抽象出了api，可以根据自己一些特点进行定制实现。

》 最后一个特点是swarm自身对docker命令参数支持的比较完善。Swarm目前与Docker基本上是同步发布的。
   Docker的新功能，都会第一时间在Swarm中体现。

下面，和大家一起来了解一下swarm的框架结构。
150‘ 
大家请看这张图，从上往下： 
首先，Swarm对外提供两种API， 
一种是DockerAPI，用于负责容器镜像的生命周期管理， 
另外一种是Swarm集群管理CLI，用于创建集群。（？只有创建集群吗？） 
下面是Scheduler模块，主要实现调度功能。 
在通过Swarm创建容器时，会经过Scheduler模块选择出一个最优节点，里面包含了两个子模块，分别是Filter和Strategy， 
Filter用来过滤节点，找出满足条件的节点（比如资源足够，节点正常等等） 
Strategy用来在过滤出的节点中根据策略选择一个最优的节点。（比如对找出的节点进行对比，找到资源最多的节点等等） 
Filter/Strategy用户可以定制。但是目前还不支持插件机制？？ 
然后我们看这一部分，Cluster API模块，Swarm对集群进行了抽象，抽象出了API，Swarm支持两种集群，一种是Swarm自身的集群，另外一种基于Mesos的集群。 
然后我们来看这一部分，LeaderShip模块，用于Swarm Manage节点的选举，完成自身的HA。 
往下是Discoversy Service 服务发现模块，这个模块主要用来提供节点发现功能。 
在每一个节点上，都会有一个Agent，用于连接DiscconveryService，上报docker Daemon的IP端口信息，Swarm Manage会直接从服务发现模块中读取节点信息。 
节点故障检测，也是通过这个发现？ 
接下来，分别对其中的各个模块进行介绍。首先来看一下，swarm Manage CLI用于集群管理。
60‘ 
在具体使用Swarm的时候，通过下面三步即可创建出Swarm集群。 
第一步，通过swarm create命令创建一个集群标示，这个命令会返回一个token标示集群的ID。 
第二部，在包含docker-engine的节点上，通过swarm join命令将节点加入到集群中。 
第三步，通过SwarmMange命令启动Manager。在创建容器的时候，可以直接通过docker命令行创建容器，在创建时，通过-H指定manage ip。 
可以看出，swarm集群构建还是很简单的。 
Swarm容器集群创建完成后，仍然可以使用docker命令，像使用Docker engine一样在Swarm集群上创建容器。 
这个manage_ip是swarm管理节点的IP。 
接下来，和大家一起看一下swarm中的资源管理。
资源管理是Swarm的主要职责之一。Swarm管理的对象是容器，容器的运行需要一定的资源。比如CPU/内存（现在还有其他资源的管理吗？比如存储网络？）等资源。
SWarm会统计每个节点的总资源和剩余资源（是如何取得？定期轮询？还是主动上报？周期如何？如何存储呢？可以说一说。），根据创建容器时候指定的参数，选择合适的节点创建容器。 
CPU这一块需要特别说明的是，swarm中-c cpushares代表的是cpu的个数，而不是CPU的相对值。在具体创建过程中，swarm会将CPU个数转换成相对值。 
举个例子来说，比如说我想创建一个cpu的容器，Swarm会cpushares的值1进行转换，swarm中默认每一个节点CPU的总权值为1024，当在创建容器的时候，如果调度到来只有1个cpu的节点，那么cpushares的值会转换为1024,100%使用。如果调度到了有2个cpu的节点，则cpushares的值会转换成512。 
既然这里已经提到了差异点，下面先对docker api差异点进行对比。
90‘ 
我们前边也提过，Swarm的一大特点是完整的支持Docker API。
但是swarm对外提供的docker api，但在具体实现过程中，与Docker engine提供的Docker API还是有点差别的。
下表我简单总结了一下：
首先是run命令，run命令在docker-engine中指的是环境变量，而在swarm中会包含一些用于调度的环境变量 
-c刚才已经提到了，在swarm中指的是cpu的个数。 
下来是build命令，build命令在swarm中，会根据-c -m参数选择一个符合要求的节点进行镜像的build过程 
下来load、pull、import这三个命令，在swarm中，会将命令对应的消息分发给每一个节点，每一个节点上都会执行相应的操纵 
下来是ps命令，在docker-engine中指的是查看容器，在swarm中容器名称里面包含了节点名称。 
下来是info命令，在swarm中包含了所有节点的信息。 
下来是login命令，在swam中，会随机选择一个节点进行登录。 
最后一个是version命令，在swarm中，包含了swarm的版本号。 
60‘ 
下来和大家一起看一下刚才框架中提到的服务发现模块。 
服务发现，在swarm中主要用于节点发现，每一个节点上的agent会（启动时？还是定期？故障也靠这个嘛？）将docker-egine的ip端口注册到服务发现系统中。Manager会从服务发现模块中读取节点信息。Swarm中服务发现支持已下3中类型的后端。 
第一种，是hosted discovery service，是Docker Hub提供的服务发现服务，需要连接外网访问。 
第二种，是KV分布式存储系统，现在已支持etcd、zookeeper、consul三种。 
第三种，是静态IP：可以使用本地文件或者直接指定节点IP，这种方式不需要启动额外使用其他组件,一般在调试中会使用到。 
180‘ 
下来和大家一起看一下刚才框架中提到的scheduler模块。 
调度模块主要用户容器创建时，选择一个最优节点。在选择最优节点过程中，分为了两个阶段： 
第一个阶段，是过滤。根据条件过滤出符合要求的节点。 
过滤器有以下5中， 
第一种，是Constraints，约束过滤器，可以根据当前操作系统类型、内核版本、存储类型等条件进行过滤，当然也可以自定义约束，在启动daemon的时候，通过Label来指定当前主机所具有的特点。使用时，采用环境变量的方式，告诉swarm。 
第二种是亲和性过滤器，支持容器亲和性和镜像亲和性，比如一个web应用，我想将db容器和web容器放在一起，就可以通过这个过滤器来实现。 
第三种是依赖过滤器。如果在创建容器的时候使用了--volume-from/--link/--net某个容器，则创建的容器会和依赖的容器在同一个节点上。 
第四种是Healthfilter，他会根据节点状态进行过滤，会去除故障节点。 
第五种是Portsfilter，会根据端口的使用情况过滤。举个例子来说，如果说我想启一个web服务，需要80端口，现在集群里面有两个节点，第一个节点的80端口已经被使用，则会过滤掉第一个节点。 
第二个阶段是根据策略选择一个最优节点。有以下三种策略 
第一种，binpack，在同等条件下，选择资源使用最多的节点，通过这一个策略，可以将容器聚集起来。 
第二种是Spread，在同等条件下，选择资源使用最少的节点，通过这一个策略，可以将容器均匀分布在每一个节点上。 
第三种是random，随机选择一个节点。 
60‘ 
下面介绍一下框架中的leadership模块，这个模块主要用来提供swarm manager自身的HA。 
为了防止Swarm Mange单点故障，引入了HA机制，Swarm Manage自身是无状态的，所以还是很容易实现HA的。 
实现过程中采用主备方式，当主节点故障以后，会从新选主提供服务，选主过程中采用分布式锁实现，现在支持etcd、zookeeper、consul三种类型的分布式存储，用来提供分布式锁。 
当备节点收到消息后，会将消息转发给主节点。 
在具体使用过程，前面最好能加一个loadbalance模块，后端可以接多个swarm实例，前面提供一个服务访问点，用来提供服务。
60‘？？？ 
接下来，和大家一起看一下Swarm的安全，Swarm通过SSL协议提供通信安全以及认证。
支持Swarm对外（比如与Client）之间的提供通信安全。
同时Swarm与Docker Engine之间的也支持通信安全。
以上就是框架中各个模块的相关介绍，下来和大家一起再看一下，swarm与周边项目的集成。
首先看一下，与三剑客之间的集成。
60‘ 
三剑客在最开始已经介绍了，是docker公司去年底发布的三个项目，这三者是可以紧密协作的。 
大家可以看一下这张图， 
最下面是Machine，通过machine可以在不同云平台上创建出包含docker-egine的主机。
Machine通过driver机制，目前支持多个平台的Docker egine环境的部署，比如（。。。。） 
Docker engine创建完以后，就该swarm上场了，swarm将每一个主机上的docker-egnine管理起来，对外提供容器集群服务。
最上面是compose项目，compose项目主要用来提供基于容器的应用的编排。
用户通过yml文件描述由多个容器组成的应用，然后由Compose解析yml，调用docker API，在swarm集群上创建出对应的容器。 
我们知道现在围绕Docker已经产生了很大的一个生态圈。 
因此swarm不仅在和自家兄弟集成，也能积极和周边的一些项目集成。
比如，swarm现在已经可以和mesos进行集成。
60‘ 
在座各位可能都对大名鼎鼎Mesos或多或少有些了解。
简单来说，Mesos是一个分布式环境中计算资源管理平台。在Mesos上可以运行多个Framework，Mesos为每一个Framework提供资源的分配、隔离（确认有隔离？）。Swarm与Mesos集成时，也是以Framework方式集成，实现了Framework所需的接口。 
大家请看这张图，上面跑的了两个Framework，分别是Marathon和Swarm，通过DockerCLI可以直接访问Swarm，然后在Mesos上创建容器。当然也可以通过Compose来描述多个容器，实现多个容器的同时创建。
下面我们一起深入的看一下，Mesos和Swarm框架的交互关系。 
60‘ 
我们看，Mesos和Swarm框架是这样协同工作的。 
创建容器时，
第一步，从zookeeper中获取MesosMaster的信息，然后将自身框架注册给Mesos。 
Mesos采用两层调度框架，第一层，由mesos将符合资源分配上报给框架，也就是图中的第二步； 
第二层，框架自身的调度器将资源分配给任务，也就是第三步。 
调度完后，swarm将容器的创建任务发送给MesosMaster，Master在经过第五步，将消息发送给slave，slave最终调用docker engine完成容器的创建。 
在这里需要注意的是，只有容器的创建\删除动作，会经过Mesos，其他操作swarm会直接访问Docker Engine。 
比如查看集群中的镜像或者查看集群中的容器，都是swarm直接调用docker-engine的接口，也就是图中的第六步。 
30‘ 
以上部分我们介绍了swarm项目的现状。 
接下来，我们一起看一下swarm社区的现状。 
60’
首先看一下swarm的发展史。 
大概在去年10月份，Swarm进行了原型验证，
在11月份，在Docker社区中，出现了关于Swarm的议题，里面描述了Swarm的目标、结构、设计等。 
12月在Docker社区中,正式出现了Swarm项目。 
在今年1月份发布了第一个版本，二月份发不了Beta版本，紧接着4月份和6月份发布了0.2和0.3， 
在这个月中旬，发布了0.4版本。 
从这个时间表中，可以看出，swarm项目发展速度还是很快的，目前还处于正在快速演进阶段，还不适合在生产环节下使用，不过相信用不了多久，就可以提供一个成熟可用的版本。 
60’
下面看一下swarm的社区的情况：
swarm项目是docker社区的子项目，github地址是。。。。 
日常的交流方式，主要有邮件列表，github上的issuse/PR讨论这样的非实时讨论方式。
也可以通过IRC进行实时讨论，这个是在freeenode上的docker-swarm频道。
总的来说Docker社区的参与者还是很nice，不论是问题还是方案，他们都很愿意和热心的和你一起讨论。
Swarm发布版本周期目前是跟着docker一起发布，基本上两个月一个版本，在开发过程中，采用迭代方式开发，基本上每两个星期完成一轮迭代。
60‘ 
swarm社区Maintainer有5个，其中三个，是docker公司的人，其中两个是创世人。这个月上旬新增了两个Maintainer。 
maintainer的主要职责是。。。 
当前swarm项目被Fork了402次，有247人关注，有接近3000个星，代码行大概有1万7千行左右，每天都有更新。
120‘
下面大概讲一下，如何参与社区。 
参与社区的方法基本上和其他社区一致。 
当遇到问题时，可以在社区创建issue，然后描述问题，最好能上环境信息以及问题重现的步骤，这样有利于问题的定位。当然也可也直接通过IRC或者邮件直接交流。 
如果对代码感兴趣的话，可以看一下提交代码的流程。 
提交代码流程从右下角绿色圆圈开始，首先fork代码到自己的仓库，然后修改代码，在这里需要注意的时，修改代码最好能带上自己的测试用例。修改代码完后，在本地commit，然后push到自己仓库。下来在创建一个Pull Request请求，这个时候，会触发CI跑测试用例，如果都跑通过了。Maintainer会对代码进行code-review，如果代码不符合要求，根据意见再次进行对代码进行修改，如果有两个Maintainer都打了LGTM，则代码会被合入到主干。最终完成代码的提交。 
Swarm社区很欢迎大家的参与，不论是使用中遇到的问题/Bug，还是Swarm功能上目前无法满足大家的地方。都欢迎大家提出来，一起讨论。
也非常欢迎大家能够参与到Swarm社区中提交代码。
10‘
以上是swarm社区的一些情况 
最后和大家一起看一下swarm未来的一些规划
120’
swarm未来规划有以下几点 
首先是支持所有的docker api，现在支持率大概在95%，其中一些实现还存在问题，需要改进。 
第二块是网络部分，swarm会和libnetwork进行集成，实现overlay network，最终提供容器跨主机通信。 
第三块是容器的HA，通过这一个功能可以实现，当一个节点故障以后，会将故障节点上的容器在另外一些节点上创建。 
第四块是Global Scheduler，全局调度。这个特性主要用来将一个容器在每一个节点上进行创建。比如，每一个我想将一个log容器在每一个节点创建，用来记录日志，则可以通过这一特性实现。 
最后面两个分别是volume和monitor，这两块暂时没在roadmap里面规划，社区里面也有讨论，但没有一个完整的propsal，个人感觉，后面肯定会加上这两块。 

我的分享到此结束，谢谢大家，最后欢迎大家参与到Swarm社区来。下面是QA环节，看看大家有什么问题。

