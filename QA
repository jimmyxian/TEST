1，	首先恭喜线超博成为Docker Swarm的Maintainer，据我所知，你也是国内第一个成为Docker系开源项目的Maintainer。先聊聊你与Docker的故事吧，以及你参与贡献多久了？
=》
谢谢。很感谢infoq提供的这次交流机会。
我目前是华为云计算部门的工程师，主要从事技术研究工作。工作主要涉及底层虚拟化技术、openstack、docker。
之前也参与过openstack社区贡献。我本人接触docker时间并不太长，大概从2014年下半年开始了解、关注并研究docker。
真正开始参与docker社区的贡献是从今年过年后开始的。起初在了解docker以及swarm是从社区里的文档开始的，最开始的一些贡献也是集中在文档上面，后来在试用swarm的时候，发现了一些BUG，通过对代码走读，找到对应的解决方案，反馈到了社区，Maintainer看到后，回复“有没有兴趣自己动手改改代码”，后来就进入了代码贡献上。在试用时，发现swarm功能缺失的也比较厉害，然后，就对其中的一些特性进行了实现，工作得到的社区的肯定。

2，能否介绍下Docker Swarm，它在Docker生态圈里处于什么位置？目前有什么竞争的项目吗？
=>
Docker Swarm项目是Docker公司去年底发布的一个项目，主要提供容器集群管理。
现在容器集群管理项目业界有好几个，最开始我也认为他们是竞争关系，但后来经过深入了解后，他们之间并不是竞争关系，各自有各自特点，出发点不太一样。
Swarm出发点是将多个docker-engine聚集起来，对外通过docker api接口提供容器管理，用户可以很方的通过docker命令行来对集群进行管理。
swarm包含了以下几个特点：
第一个特点是，对外提供docker api接口，用来管理集群。这样带来的好处是，如果现有系统使用Docker Engine，则可以平滑将Docker Engine切到Swarm上，无需改动现有系统。
第二个特点是，Swarm自身比较轻量，易上手、容器部署，学习成本和二次开发成本比较低。
第三个特点是，swarm自身是一种插件式框架，里面的各个模块都抽象出了API，方便用户根据自身特点实现相关模块。
第四个特点是，swarm自身对于的docker命令参数支持的比较完善。



3，你是什么时候知道自己成为Maintainer的？能介绍下前后的细节吗？
==>
在这个月初一次IRC讨论问题的时候，swarm的一位Maintainer也是项目创始人对我说，“有没有兴趣成为Maintainer，一起为swarm出谋划策”，
当时听到这个消息，内心只能用一个词来形容，“惊喜”。
因为，好多人对docker系社区持有的态度是“相对封闭”。里面大部分都是docker公司的人，和Openstack社区相比，怎么样成为Maintainer也没有一个具体流程。
所以我开始也没想着自己能被提名为Maintainer。
后来，Swarm的创始人，发了一封邮件抄给了docker社区所有的Maintainer，提名我成为swarm的Maintainer，介绍了我相关信息，以及对社区的贡献，征求大家的意见。
最后得到反馈是，所有人都很高兴我能成为Swarm项目的Maintainer。所以总的来说，docker系社区还是很开放的。
当然这里有一个小插曲，一个Maintainer创建了一个PR，将我增加Maintainer列表中。这个PR好多Maintainer都回复了LGTM，就是没人合入，（在docker系社区只要有两个Maintainer回复了LGTM，这个PR就可以合入到主干）。最后才发现这个PR需要新Maintainer自己合入。有点“投名状”的意思。O(∩_∩)O~


4，如何能够成为Maintainer？Maintainer有什么样的权利和义务？
个人感觉成为Maintainer需要以下几个必备条件吧：
（1）熟悉社区代码：需要走读社区代码，对各个模块的来龙去脉需要了解下。在了解的时候，可以通过翻阅相关模块的proposal，里面会看到大家的讨论。
（2）持续贡献，从小做起：在贡献的时候，可以从文档开始，然后再到bug修改，再到大的一些特性的设计实现。
（3）积极参与讨论：有任何疑惑的地方，可以在IRC上直接找Maintainer讨论，他们很乐意的。在一些问题或者Proposal发表自己的看法，多多和大家交流。

成为Maintainer后，就需要对社区进行维护管理。有以下几件事：
首先，需要对提交的代码进行code-review。如果代码没有问题，并且两个Maintainer都回复了LGTM，则可以将代码合入到主干。如果代码有问题，需要给出修改建议。
其次，还需要对用户提出的问题进行定位回复，并且打上相应的标签，用来问题分类。
当然，还需要对swarm的未来发展方向进行规划，需要承担一些大的特性的实现工作。



5，你在Swarm的贡献排行榜上排名第四，是全职在参与Swarm吗？为什么会对这个项目感兴趣？

不是全职，主要是在业余时间参与。华为公司对于员工参与开源社区也是持鼓励的态度的。

至于为什么感兴趣，
首先，是对swarm的设计理念比较认同。采用docker api接口对外提供服务，并且采用了插件式的框架，这样用户可以根据自己的喜好对系统进行定制。
这个与Unix/Linux的设计思想还是很相似的，“小即是美”，从而可以像乐高积木一样自由组合。
其次，工作上原因，主要负责docker技术在云计算领域的研究实践，这样就对容器集群这一块的了解是必不可少的。
而且Swarm项目于Docker结合比较紧密，基本上可以同步了解到最新的Docker的特性变化。

6，接下来Swarm会有哪些比较大的特性发布？你认为Swarm目前成熟可用了吗？
Swarm后续的大特性主要有：
第一个是，网络集成，与社区中的另外一个项目libnetwork进行集成，实现跨主机通信。
第二个是，容器的HA，当节点故障以后，将节点上的容器在其他节点上进行创建。
第三个是，全局调度，将一个容器在每一个节点上都进行创建。
整个项目目前进展很快，短短半年已经演进到了0.4版本，还处于快速演进阶段，目前还不适合生产环境使用。
相信用不了多久，就可以提供成熟可用的版本。


7，Docker系的开源项目都做的不错，你有学习到哪些好的开源项目运营经验吗？
在参与docker系开源项目这么长时间以来，开源项目经验开源开源总结以下几个方面：
首先，是要清晰描述明确项目的背景、要解决什么问题、怎么样使用。这样有利用志同道合的人来一起参与到社区贡献，这一块可以通过READEME来描述。当然还需要通过Roadmap描述项目的规划，有利于了解当前项目进展。
其次，项目要明确代码规范以及提交流程，这样可以减少不必要的审核，提高代码的可维护性。例如，提交的代码里面需要带上单元测试或者集成测试
第三点，作为Maintainer最好能对issue以及Pull Request进行分类。可以通过打标签的方式实现。例如将issue可以根据优先级或者难易程度分类，这样有利用不同等级贡献者参与贡献。
最后，最好能提供对接一套集成测试环境，这样在提交代码的时候，自动跑测试用例，减少维护者工作量。swarm在最开始是没有CI的，每次我在提交代码的时候，都需要其他Maintainer手动将代码下载到本地，然后进行测试，这样效率是非常低的。后来在0.2版本中，完成了CI的对接，每次提交代码时，都有3部分的测试，分别是代码规范、单元测试、集成测试，效果十分明显。

8，谈谈你参与开源的感受？
